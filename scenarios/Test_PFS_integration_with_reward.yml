version: 2

settings:
  gas_price: "fast"
  chain: kovan
  services:
    pfs:
      url: http://localhost:6000
      # use http://localhost:6000 when starting the pfs locally
    udc:
      enable: true
      token:
        deposit: true

token:
  # address: "0x5C6838D01af5E4391f5cAaA7552d4Cd55A0387A6"
  # token_address=0x78a043531F7B565cB660BfB5D62AC359a1f5e2bA token_network_address=0x952ae32f90487608E922F6f1835673f6d329457A


nodes:
  mode: managed
  count: 4
  ## add path to Raiden virtual env
  raiden_version: /home/pirate/raiden/venv/RaidenClient/bin/raiden

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-eth-address: "0x308a33011c45bfa0a801fcd16100e80629b25e1f"
    # use the correct eth address of the pfs when running
    pathfinding-max-fee: 100


scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 1000}
            - open_channel: {from: 0, to: 2, total_deposit: 1000}
            - open_channel: {from: 3, to: 1, total_deposit: 1000}
            - open_channel: {from: 3, to: 2, total_deposit: 1000}
      - parallel:
          name: "Deposit something"
          tasks:
            - deposit: {from: 1, to: 3, total_deposit: 1000}
            - deposit: {from: 2, to: 3, total_deposit: 1000}
      - serial:
          name: "Test providing routes"
          tasks:
            # Node 3 is unknown to the pfs yet
            - assert_pfs_iou: {source: 3, iou_exists: false}
            - assert_pfs_history: {source: 3, request_count: 0}

            # Node 3 cannot send tokens to Node 0 due to imbalanced channels
            # We expect the pfs not to send any route but to charge for the information
            - transfer: {from: 3, to: 0, amount: 10, expected_http_status: 409}
            - assert_pfs_history: {source: 3, target: 0, request_count: 1}
            - assert_pfs_iou: {source: 3, amount: 10}


            # Initial channel balances shouldn't have changed
            - wait: 10
            - assert: {from: 0, to: 1, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 0, state: "opened"}

            - assert: {from: 0, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 0, total_deposit: 0, balance: 0, state: "opened"}

            - assert: {from: 3, to: 1, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 1, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}

            - assert: {from: 3, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}


            # We now balance the channel to open one route from 3 to 0
            - transfer: {from: 0, to: 1, amount: 500, expected_http_status: 200}
            - assert_pfs_history: {source: 0, request_count: 1}
            - assert_pfs_iou: {source: 0, amount: 10}

            #  Channel balances should have changed for the shortest route between 0 -> 1
            - wait: 10
            - assert: {from: 0, to: 1, total_deposit: 1000, balance: 500, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 500, state: "opened"}

            - assert: {from: 0, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 0, total_deposit: 0, balance: 0, state: "opened"}

            - assert: {from: 3, to: 1, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 1, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}

            - assert: {from: 3, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}

            # now we expect the pfs to provide one path for node 3 -> 0
            - transfer: {from: 3, to: 0, amount: 10, expected_http_status: 200}
            - assert_pfs_history: {source: 3, target: 0, request_count: 2}
            - assert_pfs_iou: {source: 3, amount: 20}


            #  Channel balances should have changed again on the route 3 (-10) -> (+10) 1 (-10)-> (+10) 0
            - wait: 10
            - assert: {from: 0, to: 1, total_deposit: 1000, balance: 510, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 490, state: "opened"}

            - assert: {from: 0, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 0, total_deposit: 0, balance: 0, state: "opened"}


            - assert: {from: 3, to: 1, total_deposit: 1000, balance: 990, state: "opened"}
            - assert: {from: 1, to: 3, total_deposit: 1000, balance: 1010, state: "opened"}

            - assert: {from: 3, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}

            # we now balance the second channel to open another route from 3 to 0
            - transfer: {from: 0, to: 2, amount: 500, expected_http_status: 200}
            - assert_pfs_history: {source: 0, request_count: 2}
            - assert_pfs_iou: {source: 0, amount: 20}


            #  Channel balances should have changed again on the route 0 (-500) -> (+500) 2
            - wait: 10
            - assert: {from: 0, to: 1, total_deposit: 1000, balance: 510, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 490, state: "opened"}

            - assert: {from: 0, to: 2, total_deposit: 1000, balance: 500, state: "opened"}
            - assert: {from: 2, to: 0, total_deposit: 0, balance: 500, state: "opened"}


            - assert: {from: 3, to: 1, total_deposit: 1000, balance: 990, state: "opened"}
            - assert: {from: 1, to: 3, total_deposit: 1000, balance: 1010, state: "opened"}

            - assert: {from: 3, to: 2, total_deposit: 1000, balance: 1000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1000, balance: 1000, state: "opened"}

            # now we expect the pfs to provide two paths
            - transfer: {from: 3, to: 0, amount: 10, expected_http_status: 200}

            ## 3 requests where made from source node 3 to target node 0 and the specified number of
            ## routes have been returned
            ## The listed routes have been returned for requests from source node 0 to target node 3
            - assert_pfs_history:
                source: 3
                target: 0
                request_count: 3
                expected_routes:
                  - [3, 1, 0]
                  - [3, 1, 0]
                  - [3, 2, 0]

            # there must be at least two IOUs now in the pfs
            # - Node 0 with amount 20 (for two successful requests)
            # - Node 3 with amount 30 (for three successful requests - no route is considered as successful)
            # - Node 1 with amount 20 (for two successful requests - mediating)
            - assert_pfs_iou: {source: 0, amount: 20}
            - assert_pfs_iou: {source: 1, amount: 20}
            - assert_pfs_iou: {source: 3, amount: 30}

